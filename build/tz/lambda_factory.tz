{ parameter
    (or (or (pair %add_contract
               (lambda %contract
                  (pair (pair (address %hicetnuncMinterAddress) (nat %originatedContracts))
                        (map address (pair (bool %isCore) (nat %share))))
                  operation)
               (string %name))
            (pair %add_lambda
               (lambda %lambda
                  (pair (pair (address %hicetnuncMinterAddress) (nat %originatedContracts)) bytes)
                  (lambda unit (list operation)))
               (string %name)))
        (or (pair %create_proxy
               (string %contractName)
               (map %participants address (pair (bool %isCore) (nat %share))))
            (pair %execute_proxy (pair (string %lambdaName) (bytes %params)) (address %proxy)))) ;
  storage
    (pair (pair (map %contracts
                   string
                   (lambda
                      (pair (pair (address %hicetnuncMinterAddress) (nat %originatedContracts))
                            (map address (pair (bool %isCore) (nat %share))))
                      operation))
                (pair %data (address %hicetnuncMinterAddress) (nat %originatedContracts)))
          (map %lambdas
             string
             (lambda
                (pair (pair (address %hicetnuncMinterAddress) (nat %originatedContracts)) bytes)
                (lambda unit (list operation))))) ;
  code { UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 DIG 3 ;
                 CAR ;
                 CAR ;
                 DUP 4 ;
                 CAR ;
                 DIG 4 ;
                 CDR ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 PAIR ;
                 PAIR ;
                 NIL operation ;
                 PAIR }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 DIG 2 ;
                 CDR ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 NIL operation ;
                 PAIR } }
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET ;
                 IF_NONE { PUSH string "Contract is not found" ; FAILWITH } {} ;
                 SWAP ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 PAIR ;
                 EXEC ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 PUSH nat 1 ;
                 DUP 4 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 ADD ;
                 DUP 4 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 3 ;
                 CAR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 GET ;
                 IF_NONE { PUSH string "Lambda is not found" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 DUP 4 ;
                 CAR ;
                 CDR ;
                 PAIR ;
                 EXEC ;
                 SWAP ;
                 CDR ;
                 CONTRACT %execute (lambda unit (list operation)) ;
                 IF_NONE { PUSH string "No proxy found" ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 DIG 2 ;
                 TRANSFER_TOKENS ;
                 SWAP ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR } } } }

