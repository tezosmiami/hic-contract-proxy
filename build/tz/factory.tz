{ parameter
    (or (or (or (unit %accept_ownership)
                (pair %add_template
                   (string %name)
                   (lambda %originateFunc
                      (pair (pair (pair (address %marketplaceAddress) (address %minterAddress))
                                  (pair (address %registryAddress) (address %tokenAddress)))
                            bytes)
                      (pair (pair (address %address) (bytes %metadata)) (operation %operation)))))
            (or (pair %create_proxy (bytes %params) (string %templateName))
                (pair %is_originated_contract
                   (contract %callback bool)
                   (address %contractAddress))))
        (or (string %remove_template) (address %update_admin))) ;
  storage
    (pair (pair (pair (address %administrator)
                      (pair %data
                         (pair (address %marketplaceAddress) (address %minterAddress))
                         (pair (address %registryAddress) (address %tokenAddress))))
                (pair (big_map %originatedContracts address bytes)
                      (option %proposedAdministrator address)))
          (map %templates
             string
             (lambda
                (pair (pair (pair (address %marketplaceAddress) (address %minterAddress))
                            (pair (address %registryAddress) (address %tokenAddress)))
                      bytes)
                (pair (pair (address %address) (bytes %metadata)) (operation %operation))))) ;
  code { UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { DROP ; NIL operation ; PAIR }
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 2 ;
                     CAR ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     NIL operation ;
                     PAIR } }
               { IF_LEFT
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     GET ;
                     IF_NONE { PUSH string "Template is not found" ; FAILWITH } {} ;
                     SWAP ;
                     CAR ;
                     DUP 3 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     PAIR ;
                     EXEC ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DUP 4 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     DUP 4 ;
                     CAR ;
                     CDR ;
                     DUP 5 ;
                     CAR ;
                     CAR ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     PAIR ;
                     DIG 3 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     NIL operation ;
                     DIG 2 ;
                     CDR ;
                     CONS ;
                     PAIR }
                   { DUP ;
                     CAR ;
                     PUSH mutez 0 ;
                     DUP 4 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     DIG 3 ;
                     CDR ;
                     GET ;
                     IF_NONE { PUSH bool False } { DROP ; PUSH bool True } ;
                     TRANSFER_TOKENS ;
                     SWAP ;
                     NIL operation ;
                     DIG 2 ;
                     CONS ;
                     PAIR } } }
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SWAP ;
                 NONE (lambda
                         (pair (pair (pair address address) (pair address address)) bytes)
                         (pair (pair address bytes) operation)) ;
                 SWAP ;
                 UPDATE ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 NIL operation ;
                 PAIR }
               { DROP ; NIL operation ; PAIR } } } }

