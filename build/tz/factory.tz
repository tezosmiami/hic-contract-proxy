{ parameter
    (or (or (pair %add_contract
               (lambda %contract
                  (pair (pair (pair (address %marketplaceAddress) (address %minterAddress))
                              (pair (address %registryAddress) (address %tokenAddress)))
                        bytes)
                  (pair (pair (address %address) (bytes %metadata)) (operation %operation)))
               (string %name))
            (pair %create_proxy (string %contractName) (bytes %params)))
        (address %is_originated_contract)) ;
  storage
    (pair (pair (map %contracts
                   string
                   (lambda
                      (pair (pair (pair (address %marketplaceAddress) (address %minterAddress))
                                  (pair (address %registryAddress) (address %tokenAddress)))
                            bytes)
                      (pair (pair (address %address) (bytes %metadata)) (operation %operation))))
                (pair %data
                   (pair (address %marketplaceAddress) (address %minterAddress))
                   (pair (address %registryAddress) (address %tokenAddress))))
          (big_map %originatedContracts address bytes)) ;
  code { UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 DIG 3 ;
                 CAR ;
                 CAR ;
                 DUP 4 ;
                 CAR ;
                 DIG 4 ;
                 CDR ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 PAIR ;
                 PAIR ;
                 NIL operation ;
                 PAIR }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET ;
                 IF_NONE { PUSH string "Contract is not found" ; FAILWITH } {} ;
                 SWAP ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 PAIR ;
                 EXEC ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 DIG 2 ;
                 CAR ;
                 PAIR ;
                 NIL operation ;
                 DIG 2 ;
                 CDR ;
                 CONS ;
                 PAIR } }
           { DROP ; NIL operation ; PAIR } } }

