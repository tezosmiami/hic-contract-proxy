{ UNPAIR ;
  SWAP ;
  UNPACK (map address (pair (bool %isCore) (nat %share))) ;
  IF_NONE { PUSH string "Unpack failed" ; FAILWITH } {} ;
  PUSH nat 0 ;
  EMPTY_MAP address nat ;
  PAIR ;
  EMPTY_SET address ;
  PUSH nat 0 ;
  PAIR ;
  PAIR ;
  SWAP ;
  ITER { SWAP ;
         PAIR ;
         DUP ;
         CAR ;
         CAR ;
         CDR ;
         SWAP ;
         DUP ;
         DUG 2 ;
         CAR ;
         CAR ;
         CAR ;
         DUP 3 ;
         CDR ;
         CAR ;
         DUP 4 ;
         CDR ;
         CDR ;
         DUP 5 ;
         CDR ;
         DUP 6 ;
         CAR ;
         CDR ;
         CDR ;
         DUP 7 ;
         CAR ;
         CDR ;
         CAR ;
         DUP 4 ;
         CDR ;
         DUP 6 ;
         SWAP ;
         SOME ;
         SWAP ;
         UPDATE ;
         PAIR ;
         DUP 7 ;
         CAR ;
         CAR ;
         PAIR ;
         PAIR ;
         SWAP ;
         DUP ;
         DUG 2 ;
         CDR ;
         DIG 6 ;
         CAR ;
         CDR ;
         CDR ;
         ADD ;
         DIG 2 ;
         CAR ;
         IF { PUSH nat 1 ;
              DIG 4 ;
              ADD ;
              DIG 4 ;
              DIG 4 ;
              PUSH bool True ;
              SWAP ;
              UPDATE ;
              SWAP ;
              PAIR }
            { DIG 2 ; DROP ; DIG 3 ; DIG 3 ; PAIR } ;
         DUP 3 ;
         CDR ;
         DIG 2 ;
         DUP 4 ;
         CAR ;
         CDR ;
         CAR ;
         PAIR ;
         DIG 3 ;
         CAR ;
         CAR ;
         PAIR ;
         PAIR ;
         DUP ;
         CDR ;
         SWAP ;
         DUP ;
         DUG 2 ;
         CAR ;
         CDR ;
         DIG 2 ;
         CAR ;
         CAR ;
         CDR ;
         DUP 4 ;
         CAR ;
         PAIR ;
         PAIR ;
         PAIR ;
         DUP ;
         CAR ;
         CDR ;
         DIG 2 ;
         CDR ;
         DIG 2 ;
         CAR ;
         CAR ;
         CAR ;
         PAIR ;
         PAIR } ;
  DUP ;
  CDR ;
  CDR ;
  PUSH nat 0 ;
  SWAP ;
  DUP ;
  DUG 2 ;
  COMPARE ;
  EQ ;
  IF { PUSH string "Sum of the shares should be more than 0n" ; FAILWITH } {} ;
  PUSH nat 0 ;
  DUP 3 ;
  CAR ;
  CAR ;
  COMPARE ;
  EQ ;
  IF { PUSH string "Collab contract should have at least one core" ; FAILWITH }
     {} ;
  SWAP ;
  DUP ;
  DUG 2 ;
  CDR ;
  CAR ;
  PAIR ;
  EMPTY_BIG_MAP bytes unit ;
  DIG 3 ;
  CAR ;
  PAIR ;
  DIG 2 ;
  CAR ;
  CDR ;
  SENDER ;
  PAIR ;
  PAIR ;
  PAIR ;
  PUSH mutez 0 ;
  NONE key_hash ;
  PAIR ;
  PAIR ;
  { UNPAIR ; UNPAIR } ;
  CREATE_CONTRACT
    { parameter (or (unit %default) (lambda %execute unit (list operation))) ;
      storage
        (pair (pair (pair (address %administrator) (set %coreParticipants address))
                    (pair (address %hicetnuncMinterAddress) (big_map %mints bytes unit)))
              (pair (map %shares address nat) (nat %totalShares))) ;
      code { UNPAIR ;
             IF_LEFT { DROP ; NIL operation ; PAIR } { PUSH unit Unit ; EXEC ; PAIR } } } ;
  PAIR ;
  CAR }

